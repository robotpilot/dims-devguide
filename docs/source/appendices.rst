.. _appendices:

Appendices
==========

.. _setupdnsmasq:

Setting up DNS using dnsmasq
----------------------------

DNS is designed to be a distributed, hierarchical, system of
mapping names to IP addresses (and the reverse, IP addresses
to names).

.. note::

   To learn more about it, see:

       #. `How the Domain Name System (DNS) Works`_, by Verisign

       #. `How does DNS work?`_, by D.J. Berstein

       #. `The Domain Name System`_, Wikipedia

..

.. _How the Domain Name System (DNS) Works: http://www.verisigninc.com/en_US/domain-names/online/how-dns-works/index.xhtml
.. _How does DNS work?: http://cr.yp.to/djbdns/intro-dns.html
.. _The Domain Name System: https://en.wikipedia.org/wiki/Domain_Name_System

The important thing to note is that if you only have one DNS
server set, and that server only serves it's own names and does
not make recursive queries for domains it does not know, you
will not be able to talk to many hosts on the internet.

These instructions will configure ``dnsmasq`` on a developer's
workstation (e.g., a laptop computer) to serve as the primary
DNS server for that system, using a local DNS server behind a
VPN (when connected to the VPN) or recursively directing queries
to Google's name servers for all other DNS requests. This should
work for any DNS requests made from this client system in a
reliable way.

.. _macosxdnsconfig:

Mac OS X configuration
~~~~~~~~~~~~~~~~~~~~~~

.. attention::

    The following instructions are partially specific to Mac OS X,
    which handles network configuration using **System Preferences...*

..

Start by creating a *Location* called *VPN" to use for
controlling the DNS configuration of the Mac. Figure
:ref:`networklocation` shows the location *VPN* enabled.

.. _networklocation:

.. figure:: images/OSX-network-Location.png
   :alt: Mac OS X Network Preferences, Location
   :width: 65%
   :align: center

   Mac OS X Network Preferences, Location

..

Figure :ref:`networkpreferences` shows the settings
for *DNS Server* and *Search*. Set *DNS Server* to
only be ``127.0.0.1`` for force all DNS queries to
*only* go to the local ``dnsmasq`` server. The *Search*
list should include your normal domain that you want
to be appended to any short (or *partially qualified*)
DNS names.

.. _networkpreferences:

.. figure:: images/OSX-network-DNS.png
   :alt: Mac OS X Network Preferences, DNS
   :width: 65%
   :align: center

   Mac OS X Network Preferences, DNS

..

When set this way, as soon as the network is enabled on any
interface (be it WiFi, Bluetooth, USB ethernet, or wired
ethernet), the *VPN* location will be enabled and the host's
``/etc/resolv.conf`` file will be set to look like this:

.. code-block:: bash

    #
    # Mac OS X Notice
    #
    # This file is not used by the host name and address resolution
    # or the DNS query routing mechanisms used by most processes on
    # this Mac OS X system.
    #
    # This file is automatically generated.
    #
    search apl.washington.edu
    nameserver 127.0.0.1

..

Edit the ``dnsmasq`` configuration file (``/opt/local/etc/dnsmasq.conf``
on the Mac, and ``/etc/dnsmasq.conf`` on Ubuntu 14.04). Set the following
variables as shown in the examples.

#. Add a line referencing an alternative ``resolve.conf`` file to
   control upstream DNS servers.

    .. code-block:: bash

        # Change this line if you want dns to get its upstream servers from
        # somewhere other that /etc/resolv.conf
        #resolv-file=/etc/resolv.conf
        resolv-file=/etc/resolv.dnsmasq

    ..

#. Set the ``server`` entries for forward lookups containing the top level
   domain ``prisem.washington.edu`` and reverse maps for the DIMS VPN network
   range (``192.168.88.0/24``, which is expressed as
   ``88.168.192.in-addr.arpa`` for DNS reverse mappings) as shown in the
   highlighted lines here:


   .. code-block:: bash
       :emphasize-lines: 4,5,10

       # Add other name servers here, with domain specs if they are for
       # non-public domains.
       #server=/localnet/192.168.0.1
       server=/prisem.washington.edu/192.168.88.101
       server=/dims-dev.prisem.washington.edu/127.0.0.1

       # Example of routing PTR queries to nameservers: this will send all
       # address->name queries for 192.168.3/24 to nameserver 10.1.2.3
       #server=/3.168.192.in-addr.arpa/10.1.2.3
       server=/88.168.192.in-addr.arpa/192.168.88.101

   ..

   .. note::

       The second ``server`` line in the first set above creates a test
       domain ``dims-dev.prisem.washington.edu`` that is served by this
       ``dnsmasq`` server on the local host address. This allows you to
       test services running on the loopback interface.

   ..

   .. attention::

       Mac users will need to configure ``dnsmasq`` to run under
       ``_mdnsresponder`` account. Use the following lines:

       .. code-block:: bash

           # If you want dnsmasq to change uid and gid to something other
           # than the default, edit the following lines.
           user=_mdnsresponder
           group=_mdnsresponder

       ..

   ..

#. If you also have a home network that you wish to associate with a specific
   alternative domain, use the ``domain`` setting as shown here:

   .. code-block:: bash

       # Set a different domain for a particular subnet
       #domain=wireless.thekelleys.org.uk,192.168.2.0/24
       domain=home,192.168.1.0/24

   ..

#. 
   
   .. caution::

       When switching a VPN connection on and off, where you are trying to use
       non-public DNS names served by a server behind the VPN, you may encounter a
       situation where queries for a non-public domain are sent to public DNS
       servers, which will return an "NXDOMAIN" response, which looks like this

       .. code-block:: bash

           Host abcquq12examfooltest.com not found: 3(NXDOMAIN)

       ..

       The local server may cache this result. When you then connect
       to the VPN and regain access to the private server which should
       be able to now respond with the correct result, your next attempt
       to resolve the domain may find the cached NXDOMAIN result
       and tell you the domain still does not exist (when you are assuming
       that it does, since the VPN is now up.) This is both confusing,
       and frustrating, unless you are aware of how DNS caching works.

       To prevent this problem, disable negative caching as follows:

       .. code-block:: bash

           # If you want to disable negative caching, uncomment this.
           no-negcache

       ..

#.

   .. attention::

       As a debugging mechanism, you may need to enable logging of
       DNS queries and/or DHCP transactions. Do that by uncommenting
       the following lines:

       .. code-block:: bash

           # For debugging purposes, log each DNS query as it passes through
           # dnsmasq.
           log-queries

           # Log lots of extra information about DHCP transactions.
           log-dhcp

       ..

   ..

#. Create the alternative ``resolv.conf`` file referenced in the
   ``dnsmasq.conf`` file above to have the contents shown here:

   .. code-block:: bash

       [dittrich@localhost etc]$ cat resolv.dnsmasq 
       search prisem.washington.edu apl.washington.edu
       nameserver 8.8.8.8
       nameserver 192.168.88.101
       nameserver 128.95.120.1

   ..

#. Test the configuration.
  
   With VPN disconnected:

   .. code-block:: bash

       [dittrich@localhost etc]$ dig @127.0.0.1 jira.prisem.washington.edu

       ; <<>> DiG 9.8.3-P1 <<>> @127.0.0.1 jira.prisem.washington.edu
       ; (1 server found)
       ;; global options: +cmd
       ;; connection timed out; no servers could be reached

   ..

   With VPN enabled:

   .. code-block:: bash

       [dittrich@localhost etc]$ dig @127.0.0.1 jira.prisem.washington.edu

       ; <<>> DiG 9.8.3-P1 <<>> @127.0.0.1 jira.prisem.washington.edu
       ; (1 server found)
       ;; global options: +cmd
       ;; Got answer:
       ;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 58384
       ;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 0

       ;; QUESTION SECTION:
       ;jira.prisem.washington.edu.    IN      A

       ;; ANSWER SECTION:
       jira.prisem.washington.edu. 0   IN      A       192.168.88.97

       ;; Query time: 18 msec
       ;; SERVER: 127.0.0.1#53(127.0.0.1)
       ;; WHEN: Wed Jul  1 17:32:54 2015
       ;; MSG SIZE  rcvd: 60

   ..


Split-Horizon DNS
~~~~~~~~~~~~~~~~~

Organizations often use non-routable network address ranges,
as defined by `RFC 1918 - Address Allocation for Private Internets`_,
on the *internal* portion of a firewalled network that also has
*external* internet-facing 

The video `DNS Split Brain`_ explains some of the issues of handling
DNS mappings in situations where networks are partitioned. An organization
may have service domain names be the *same* to point to separate internal
and external resources, even though they have completely different IP addresses.
A web server, for example, may be accessible to users on the internet
with limited public content, while another server that has the *same fully-qualified
domain name* may be hosted on the inside of a firewall and VPN with different
content that is private to the organization. Having multiple DNS servers,
rather than just one DNS server, and configuring them to properly
answer and/or forward DNS requests differently (depending on the *perspective*
of the client making the request) adds complexity for system administration,
but can simplify things from a user perspective when trying to access a resource.

References on configuring ``dnsmasq`` and the concept of *Split-horizon DNS*
are included in the :ref:`dittrich:dns` Section of the home page of
:ref:`dittrich:homepage`.


.. _RFC 1918 - Address Allocation for Private Internets: https://tools.ietf.org/html/rfc1918
.. _DNS Split Brain: https://youtu.be/55YONDU22qc
